{"ast":null,"code":"import * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, ChangeDetectionStrategy, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport Glide from '@glidejs/glide';\nconst _c0 = [\"glideEl\"];\nconst _c1 = [\"glideSlidesEl\"];\n\nfunction NgxGlideComponent_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxGlideComponent_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction NgxGlideComponent_ng_container_16_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 14);\n  }\n\n  if (rf & 2) {\n    const glideBullet_r6 = ctx.$implicit;\n    i0.ɵɵattribute(\"data-glide-dir\", \"=\" + glideBullet_r6);\n  }\n}\n\nfunction NgxGlideComponent_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NgxGlideComponent_ng_container_16_button_1_Template, 1, 1, \"button\", 13);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.glideBullets);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst defaultExtraSettings = {\n  showArrows: true,\n  showBullets: true,\n  arrowLeftLabel: 'left',\n  arrowRightLabel: 'right',\n  listenToEvents: false\n};\nconst defaultSettings = {\n  type: 'slider',\n  startAt: 0,\n  perView: 1,\n  focusAt: 0,\n  gap: 10,\n  autoplay: false,\n  hoverpause: true,\n  keyboard: true,\n  bound: false,\n  swipeThreshold: 80,\n  dragThreshold: 120,\n  perTouch: false,\n  touchRatio: 0.5,\n  touchAngle: 45,\n  animationDuration: 400,\n  rewind: true,\n  rewindDuration: 800,\n  animationTimingFunc: 'cubic-bezier(0.165, 0.840, 0.440, 1.000)',\n  direction: 'ltr',\n  peek: 0,\n  breakpoints: {},\n  classes: {\n    direction: {\n      ltr: 'glide--ltr',\n      rtl: 'glide--rtl'\n    },\n    slider: 'glide--slider',\n    carousel: 'glide--carousel',\n    swipeable: 'glide--swipeable',\n    dragging: 'glide--dragging',\n    cloneSlide: 'glide__slide--clone',\n    activeNav: 'glide__bullet--active',\n    activeSlide: 'glide__slide--active',\n    disabledArrow: 'glide__arrow--disabled'\n  },\n  throttle: 25\n}; // noinspection TypeScriptFieldCanBeMadeReadonly,DuplicatedCode\n\nlet NgxGlideComponent = /*#__PURE__*/(() => {\n  class NgxGlideComponent {\n    constructor(changeDetectorRef, platformId) {\n      this.changeDetectorRef = changeDetectorRef;\n      this.platformId = platformId;\n      this.showArrows = defaultExtraSettings.showArrows;\n      this.showBullets = defaultExtraSettings.showBullets;\n      this.arrowLeftLabel = defaultExtraSettings.arrowLeftLabel;\n      this.arrowLeftTemplate = null;\n      this.arrowRightLabel = defaultExtraSettings.arrowRightLabel;\n      this.arrowRightTemplate = null;\n      this.listenToEvents = defaultExtraSettings.listenToEvents;\n      this.glideBullets = [];\n      this.type = defaultSettings.type;\n      this.startAt = defaultSettings.startAt;\n      this.perView = defaultSettings.perView;\n      this.focusAt = defaultSettings.focusAt;\n      this.gap = defaultSettings.gap;\n      this.autoplay = defaultSettings.autoplay;\n      this.hoverpause = defaultSettings.hoverpause;\n      this.keyboard = defaultSettings.keyboard;\n      this.bound = defaultSettings.bound;\n      this.swipeThreshold = defaultSettings.swipeThreshold;\n      this.dragThreshold = defaultSettings.dragThreshold;\n      this.perTouch = defaultSettings.perTouch;\n      this.touchRatio = defaultSettings.touchRatio;\n      this.touchAngle = defaultSettings.touchAngle;\n      this.animationDuration = defaultSettings.animationDuration;\n      this.rewind = defaultSettings.rewind;\n      this.rewindDuration = defaultSettings.rewindDuration;\n      this.animationTimingFunc = defaultSettings.animationTimingFunc;\n      this.direction = defaultSettings.direction;\n      this.peek = defaultSettings.peek;\n      this.breakpoints = defaultSettings.breakpoints;\n      this.classes = defaultSettings.classes;\n      this.throttle = defaultSettings.throttle;\n      this.mountedBefore = new EventEmitter();\n      this.mountedAfter = new EventEmitter();\n      this.updated = new EventEmitter();\n      this.played = new EventEmitter();\n      this.paused = new EventEmitter();\n      this.buildedBefore = new EventEmitter();\n      this.buildedAfter = new EventEmitter();\n      this.ranBefore = new EventEmitter();\n      this.ran = new EventEmitter();\n      this.ranAfter = new EventEmitter();\n      this.ranOffset = new EventEmitter();\n      this.runStarted = new EventEmitter();\n      this.runEnded = new EventEmitter();\n      this.moved = new EventEmitter();\n      this.movedAfter = new EventEmitter();\n      this.resized = new EventEmitter();\n      this.swipeStarted = new EventEmitter();\n      this.swipeMoved = new EventEmitter();\n      this.swipeEnded = new EventEmitter();\n      this.translateJumped = new EventEmitter();\n    }\n\n    static getGlideUpdateSettings(changes) {\n      const settings = {};\n\n      for (const key in changes) {\n        if (!Object.prototype.hasOwnProperty.call(changes, key)) {\n          continue;\n        }\n\n        if (!Object.prototype.hasOwnProperty.call(defaultSettings, key)) {\n          continue;\n        }\n\n        const change = changes[key];\n\n        if (change.previousValue !== change.currentValue) {\n          settings[key] = change.currentValue;\n        }\n      }\n\n      return settings;\n    }\n\n    ngOnChanges(changes) {\n      if (isPlatformBrowser(this.platformId) && changes && this.glide) {\n        this.update(NgxGlideComponent.getGlideUpdateSettings(changes));\n      }\n    }\n\n    ngAfterViewInit() {\n      if (isPlatformBrowser(this.platformId) && Glide) {\n        this.create();\n      }\n    }\n\n    ngOnDestroy() {\n      this.destroy();\n    }\n\n    getStyleDisplay(condition) {\n      return condition ? 'block' : 'none';\n    }\n\n    getIndex() {\n      return this.glide && this.glide.index;\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    getSettings() {\n      return this.glide && this.glide.settings;\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    getType() {\n      return this.glide && this.glide.type;\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    isDisabled() {\n      return this.glide && this.glide.disabled;\n    }\n\n    mount() {\n      if (this.glide) {\n        this.glide.mount();\n      }\n    }\n\n    update(settings) {\n      if (this.glide) {\n        this.glide.update(settings);\n        this.changeDetectorRef.detectChanges();\n      }\n    }\n\n    destroy() {\n      if (this.glide) {\n        this.glide.destroy();\n      }\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    go(pattern) {\n      if (this.glide) {\n        this.glide.go(pattern);\n      }\n    }\n\n    pause() {\n      if (this.glide) {\n        this.glide.pause();\n      }\n    }\n\n    play(force) {\n      if (this.glide) {\n        if (typeof force === 'number') {\n          this.glide.play(force);\n        } else {\n          this.glide.play();\n        }\n      }\n    } // noinspection JSUnusedGlobalSymbols\n\n\n    disable() {\n      if (this.glide) {\n        this.glide.disable();\n      }\n    }\n\n    enable() {\n      if (this.glide) {\n        this.glide.enable();\n      }\n    }\n\n    isType(type) {\n      return this.glide && this.glide.isType(type);\n    }\n\n    recreate() {\n      if (this.glide) {\n        this.destroy();\n      }\n\n      this.create();\n    }\n\n    create() {\n      this.initGlideBullets();\n      this.glide = new Glide(this.glideEl?.nativeElement, this.getGlideInitSettings());\n      this.initGlideEvents();\n      this.mount();\n      this.changeDetectorRef.detectChanges();\n    }\n\n    initGlideBullets() {\n      const glideSlidesNativeElement = this.glideSlidesEl?.nativeElement;\n      const childrenLength = glideSlidesNativeElement.children.length;\n      this.glideBullets = [...new Array(childrenLength).keys()];\n      this.changeDetectorRef.detectChanges();\n    }\n\n    initGlideEvents() {\n      if (!this.glide || !this.listenToEvents) {\n        return;\n      }\n\n      this.glide.on('mount.before', () => this.mountedBefore.emit());\n      this.glide.on('mount.after', () => this.mountedAfter.emit());\n      this.glide.on('update', () => this.updated.emit());\n      this.glide.on('play', () => this.played.emit());\n      this.glide.on('pause', () => this.paused.emit());\n      this.glide.on('build.before', () => this.buildedBefore.emit());\n      this.glide.on('build.after', () => this.buildedAfter.emit());\n      this.glide.on('run.before', move => this.ranBefore.emit(move));\n      this.glide.on('run', move => this.ran.emit(move));\n      this.glide.on('run.after', move => this.ranAfter.emit(move));\n      this.glide.on('run.offset', move => this.ranOffset.emit(move));\n      this.glide.on('run.start', move => this.runStarted.emit(move));\n      this.glide.on('run.end', move => this.runEnded.emit(move));\n      this.glide.on('move', movement => this.moved.emit(movement));\n      this.glide.on('move.after', movement => this.movedAfter.emit(movement));\n      this.glide.on('resize', () => this.resized.emit());\n      this.glide.on('swipe.start', () => this.swipeStarted.emit());\n      this.glide.on('swipe.move', () => this.swipeMoved.emit());\n      this.glide.on('swipe.end', () => this.swipeEnded.emit());\n      this.glide.on('translate.jump', movement => this.translateJumped.emit(movement));\n    }\n\n    getGlideInitSettings() {\n      return {\n        type: this.type,\n        startAt: this.startAt,\n        perView: this.perView,\n        focusAt: this.focusAt,\n        gap: this.gap,\n        autoplay: this.autoplay,\n        hoverpause: this.hoverpause,\n        keyboard: this.keyboard,\n        bound: this.bound,\n        swipeThreshold: this.swipeThreshold,\n        dragThreshold: this.dragThreshold,\n        perTouch: this.perTouch,\n        touchRatio: this.touchRatio,\n        touchAngle: this.touchAngle,\n        animationDuration: this.animationDuration,\n        rewind: this.rewind,\n        rewindDuration: this.rewindDuration,\n        animationTimingFunc: this.animationTimingFunc,\n        direction: this.direction,\n        peek: this.peek,\n        breakpoints: this.breakpoints,\n        classes: this.classes,\n        throttle: this.throttle\n      };\n    }\n\n  }\n\n  NgxGlideComponent.ɵfac = function NgxGlideComponent_Factory(t) {\n    return new (t || NgxGlideComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  NgxGlideComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxGlideComponent,\n    selectors: [[\"ngx-glide\"]],\n    viewQuery: function NgxGlideComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.glideEl = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.glideSlidesEl = _t.first);\n      }\n    },\n    inputs: {\n      showArrows: \"showArrows\",\n      showBullets: \"showBullets\",\n      arrowLeftLabel: \"arrowLeftLabel\",\n      arrowLeftTemplate: \"arrowLeftTemplate\",\n      arrowRightLabel: \"arrowRightLabel\",\n      arrowRightTemplate: \"arrowRightTemplate\",\n      listenToEvents: \"listenToEvents\",\n      type: \"type\",\n      startAt: \"startAt\",\n      perView: \"perView\",\n      focusAt: \"focusAt\",\n      gap: \"gap\",\n      autoplay: \"autoplay\",\n      hoverpause: \"hoverpause\",\n      keyboard: \"keyboard\",\n      bound: \"bound\",\n      swipeThreshold: \"swipeThreshold\",\n      dragThreshold: \"dragThreshold\",\n      perTouch: \"perTouch\",\n      touchRatio: \"touchRatio\",\n      touchAngle: \"touchAngle\",\n      animationDuration: \"animationDuration\",\n      rewind: \"rewind\",\n      rewindDuration: \"rewindDuration\",\n      animationTimingFunc: \"animationTimingFunc\",\n      direction: \"direction\",\n      peek: \"peek\",\n      breakpoints: \"breakpoints\",\n      classes: \"classes\",\n      throttle: \"throttle\"\n    },\n    outputs: {\n      mountedBefore: \"mountedBefore\",\n      mountedAfter: \"mountedAfter\",\n      updated: \"updated\",\n      played: \"played\",\n      paused: \"paused\",\n      buildedBefore: \"buildedBefore\",\n      buildedAfter: \"buildedAfter\",\n      ranBefore: \"ranBefore\",\n      ran: \"ran\",\n      ranAfter: \"ranAfter\",\n      ranOffset: \"ranOffset\",\n      runStarted: \"runStarted\",\n      runEnded: \"runEnded\",\n      moved: \"moved\",\n      movedAfter: \"movedAfter\",\n      resized: \"resized\",\n      swipeStarted: \"swipeStarted\",\n      swipeMoved: \"swipeMoved\",\n      swipeEnded: \"swipeEnded\",\n      translateJumped: \"translateJumped\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 17,\n    vars: 17,\n    consts: [[1, \"glide\"], [\"glideEl\", \"\"], [\"data-glide-el\", \"track\", 1, \"glide__track\"], [1, \"glide__slides\"], [\"glideSlidesEl\", \"\"], [\"data-glide-el\", \"controls\", 1, \"glide__arrows\"], [\"data-glide-dir\", \"<\", 1, \"glide__arrow\", \"glide__arrow--left\"], [\"data-glide-dir\", \">\", 1, \"glide__arrow\", \"glide__arrow--right\"], [\"data-glide-dir\", \"<\"], [4, \"ngTemplateOutlet\"], [\"data-glide-dir\", \">\"], [\"data-glide-el\", \"controls[nav]\", 1, \"glide__bullets\"], [4, \"ngIf\"], [\"class\", \"glide__bullet\", 4, \"ngFor\", \"ngForOf\"], [1, \"glide__bullet\"]],\n    template: function NgxGlideComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3, 4);\n        i0.ɵɵprojection(5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"button\", 6);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 7);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 8);\n        i0.ɵɵtemplate(12, NgxGlideComponent_ng_container_12_Template, 1, 0, \"ng-container\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 10);\n        i0.ɵɵtemplate(14, NgxGlideComponent_ng_container_14_Template, 1, 0, \"ng-container\", 9);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 11);\n        i0.ɵɵtemplate(16, NgxGlideComponent_ng_container_16_Template, 2, 1, \"ng-container\", 12);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵstyleProp(\"display\", ctx.showArrows ? \"block\" : \"none\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.getStyleDisplay(!ctx.arrowLeftTemplate));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.arrowLeftLabel, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.getStyleDisplay(!ctx.arrowRightTemplate));\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.arrowRightLabel, \" \");\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.getStyleDisplay(!!ctx.arrowLeftTemplate));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.arrowLeftTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.getStyleDisplay(!!ctx.arrowRightTemplate));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.arrowRightTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"display\", ctx.showBullets ? \"block\" : \"none\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.glideBullets);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i1.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgxGlideComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxGlideModule = /*#__PURE__*/(() => {\n  class NgxGlideModule {}\n\n  NgxGlideModule.ɵfac = function NgxGlideModule_Factory(t) {\n    return new (t || NgxGlideModule)();\n  };\n\n  NgxGlideModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxGlideModule\n  });\n  NgxGlideModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return NgxGlideModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgxGlideComponent, NgxGlideModule }; //# sourceMappingURL=ngx-glide.mjs.map","map":null,"metadata":{},"sourceType":"module"}