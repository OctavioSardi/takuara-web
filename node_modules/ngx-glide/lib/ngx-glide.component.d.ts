import { AfterViewInit, ChangeDetectorRef, OnChanges, OnDestroy, SimpleChanges, TemplateRef } from '@angular/core';
import { Settings } from './shared/settings.interface';
import * as i0 from "@angular/core";
export declare class NgxGlideComponent implements OnChanges, AfterViewInit, OnDestroy {
    private changeDetectorRef;
    private platformId;
    showArrows: boolean;
    showBullets: boolean;
    arrowLeftLabel: string;
    arrowLeftTemplate: TemplateRef<unknown> | null;
    arrowRightLabel: string;
    arrowRightTemplate: TemplateRef<unknown> | null;
    listenToEvents: boolean;
    glideBullets: number[];
    type: string;
    startAt: number;
    perView: number;
    focusAt: number | string;
    gap: number;
    autoplay: number | boolean;
    hoverpause: boolean;
    keyboard: boolean;
    bound: boolean;
    swipeThreshold: number | boolean;
    dragThreshold: number | boolean;
    perTouch: number | boolean;
    touchRatio: number;
    touchAngle: number;
    animationDuration: number;
    rewind: boolean;
    rewindDuration: number;
    animationTimingFunc: string;
    direction: string;
    peek: number | Record<string, unknown>;
    breakpoints: Record<string, unknown>;
    classes: Record<string, unknown>;
    throttle: number;
    private mountedBefore;
    private mountedAfter;
    private updated;
    private played;
    private paused;
    private buildedBefore;
    private buildedAfter;
    private ranBefore;
    private ran;
    private ranAfter;
    private ranOffset;
    private runStarted;
    private runEnded;
    private moved;
    private movedAfter;
    private resized;
    private swipeStarted;
    private swipeMoved;
    private swipeEnded;
    private translateJumped;
    private glideEl?;
    private glideSlidesEl?;
    private glide;
    constructor(changeDetectorRef: ChangeDetectorRef, platformId: string);
    private static getGlideUpdateSettings;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getStyleDisplay(condition: boolean): string;
    getIndex(): number;
    getSettings(): Settings;
    getType(): string;
    isDisabled(): boolean;
    mount(): void;
    update(settings: Record<string, unknown>): void;
    destroy(): void;
    go(pattern: string): void;
    pause(): void;
    play(force?: number): void;
    disable(): void;
    enable(): void;
    isType(type: string): boolean;
    recreate(): void;
    private create;
    private initGlideBullets;
    private initGlideEvents;
    private getGlideInitSettings;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxGlideComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxGlideComponent, "ngx-glide", never, { "showArrows": "showArrows"; "showBullets": "showBullets"; "arrowLeftLabel": "arrowLeftLabel"; "arrowLeftTemplate": "arrowLeftTemplate"; "arrowRightLabel": "arrowRightLabel"; "arrowRightTemplate": "arrowRightTemplate"; "listenToEvents": "listenToEvents"; "type": "type"; "startAt": "startAt"; "perView": "perView"; "focusAt": "focusAt"; "gap": "gap"; "autoplay": "autoplay"; "hoverpause": "hoverpause"; "keyboard": "keyboard"; "bound": "bound"; "swipeThreshold": "swipeThreshold"; "dragThreshold": "dragThreshold"; "perTouch": "perTouch"; "touchRatio": "touchRatio"; "touchAngle": "touchAngle"; "animationDuration": "animationDuration"; "rewind": "rewind"; "rewindDuration": "rewindDuration"; "animationTimingFunc": "animationTimingFunc"; "direction": "direction"; "peek": "peek"; "breakpoints": "breakpoints"; "classes": "classes"; "throttle": "throttle"; }, { "mountedBefore": "mountedBefore"; "mountedAfter": "mountedAfter"; "updated": "updated"; "played": "played"; "paused": "paused"; "buildedBefore": "buildedBefore"; "buildedAfter": "buildedAfter"; "ranBefore": "ranBefore"; "ran": "ran"; "ranAfter": "ranAfter"; "ranOffset": "ranOffset"; "runStarted": "runStarted"; "runEnded": "runEnded"; "moved": "moved"; "movedAfter": "movedAfter"; "resized": "resized"; "swipeStarted": "swipeStarted"; "swipeMoved": "swipeMoved"; "swipeEnded": "swipeEnded"; "translateJumped": "translateJumped"; }, never, ["*"], false>;
}
