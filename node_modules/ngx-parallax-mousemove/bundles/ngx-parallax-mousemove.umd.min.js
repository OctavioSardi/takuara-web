!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/common"),require("@angular/core"),require("parallax-js")):"function"==typeof define&&define.amd?define(["exports","@angular/common","@angular/core","parallax-js"],t):t(e["ngx-parallax-mousemove"]={},e.ng.common,e.ng.core,e["parallax-js"])}(this,function(e,t,r,n){"use strict";n=n&&n.hasOwnProperty("default")?n["default"]:n;var o=function(){function e(e){}return e.prototype.ngOnInit=function(){if(!this.depth)throw new Error("depth is required")},e}();o.decorators=[{type:r.Directive,args:[{selector:"[parallaxLayer]"}]}],o.ctorParameters=function(){return[{type:r.ElementRef}]},o.propDecorators={depth:[{type:r.Input},{type:r.HostBinding,args:["attr.data-depth"]}]};var a=function(){function e(e){this.document=e}return e.prototype.ngOnInit=function(){if(!this.id)throw new Error("id is required")},e.prototype.ngAfterViewInit=function(){console.log("this.id-------------------------"+this.id);var e=this.document.getElementById(this.id);this.parallaxInstance=new n(e,this.parallaxOptions)},e.prototype.ngOnDestroy=function(){this.parallaxInstance.disable()},e}();a.decorators=[{type:r.Directive,args:[{selector:"[parallaxWrapper]"}]}],a.ctorParameters=function(){return[{type:undefined,decorators:[{type:r.Inject,args:[t.DOCUMENT]}]}]},a.propDecorators={id:[{type:r.Input}],parallaxOptions:[{type:r.Input}]};var i=function(){return function(){}}();i.decorators=[{type:r.NgModule,args:[{imports:[t.CommonModule],declarations:[a,o],exports:[a,o]}]}],i.ctorParameters=function(){return[]},e.ParallaxMousemoveModule=i,e.ɵb=o,e.ɵa=a,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-parallax-mousemove.umd.min.js.map
